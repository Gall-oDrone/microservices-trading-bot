version: "3"

services:
  golang-order-producer:
    build:
      context: ./golang_server/data_server
      dockerfile: Dockerfile
    expose:
      - "8080"
    ports:
      - "8080:8080"
    restart: unless-stopped
    depends_on:
      - kafka
      - cassandra
    # networks:
    #   - backend
    env_file:
      - bitso/bitso-variables.env
    environment:
      - orders_topic=topic1
      - trades_topic=topic1
      - kafkaURL=kafka:9092
      - HOSTS=cassandra
      - CASSANDRA_USERNAME=cassandra
      - CASSANDRA_PASSWORD=cassandra
      - API_PORT=8080
  golang-order-producer-2:
    build:
      context: ./golang_server/producer-logger-2
      dockerfile: Dockerfile
    expose:
      - "8080"
    ports:
      - "8080:8080"
    restart: unless-stopped
    depends_on:
      - cassandra
    # networks:
    #   - backend
    env_file:
      - bitso/bitso-variables.env
    environment:
      - HOSTS=cassandra
      - CASSANDRA_USERNAME=cassandra
      - CASSANDRA_PASSWORD=cassandra
      - API_PORT=8080
  golang-order-producer-3:
    build:
      context: ./golang_server/producer-logger-3
      dockerfile: Dockerfile
    expose:
      - "8081"
    ports:
      - "8081:8081"
    restart: unless-stopped
    depends_on:
      - cassandra
    # networks:
    #   - backend
    env_file:
      - bitso/bitso-variables.env
    environment:
      - HOSTS=cassandra
      - CASSANDRA_USERNAME=cassandra
      - CASSANDRA_PASSWORD=cassandra
      - API_PORT=8081

  golang-order-producer-4:
    build:
      context: ./golang_server/producer-logger-4
      dockerfile: Dockerfile
    env_file:
      - bitso/bitso-variables.env
    environment:
      kafkaURL: kafka:9092
      orders_topic: topic1
      trades_topic: topic1
      GroupID: logger-group
      KAFKA_USER_ID: 1000
      KAFKA_GROUP_ID: 1000
    ports:
      - 4001:4001
    user: "1000:1000"
    depends_on:
      - kafka
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
  
  zookeeper:
    # hostname: zookeeper
    image: wurstmeister/zookeeper:3.4.6
    expose:
      - "2181"
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    env_file:
      - kafka/kafka-variables.env
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
      - "8082:8082"
      - "8083:8083"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE

  kafka-connect:
    image: debezium/connect:latest
    hostname: connect
    container_name: connect
    ports:
      - "8086:8086"
    links:
      - kafka
    environment:
      - BOOTSTRAP_SERVERS=kafka:9093
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
      - DEBEZIUM_CONFIG_CONNECTOR_CLASS=io.debezium.connector.postgresql.PostgresConnector
      - DEBEZIUM_CONFIG_DATABASE_HOSTNAME=database
      - DEBEZIUM_CONFIG_DATABASE_PORT=5433
      - DEBEZIUM_CONFIG_DATABASE_PASSWORD=postgres
      - DEBEZIUM_CONFIG_DATABASE_USER=postgres
      - DEBEZIUM_CONFIG_DATABASE_SERVER_NAME=postgres
      - DEBEZIUM_CONFIG_DATABASE_DBNAME=postgres
      - KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - INTERNAL_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - INTERNAL_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
    depends_on:
      - kafka
      - db-postgres-trades

  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    ports:
      - 9042:9042
    volumes:
      - ~/apps/cassandra:/var/lib/cassandra
    # networks:
    #   - backend
    environment:
      - CASSANDRA_CLUSTER_NAME=mycluster
      - CASSANDRA_SEEDS=cassandra
      - CASSANDRA_PASSWORD_SEEDER=yes
      - CASSANDRA_PASSWORD=cassandra

  golang-order-consumer:
    build:
      context: ./golang_server/consumer-logger
      dockerfile: Dockerfile
    env_file:
      - bitso/bitso-variables.env
    environment:
      kafkaURL: kafka:9092
      topic: topic1
      GroupID: logger-group
      KAFKA_USER_ID: 1000
      KAFKA_GROUP_ID: 1000
    ports:
      - 4000:4000
    user: "1000:1000"
    depends_on:
      - kafka

  golang-order-consumer-2:
    build:
      context: ./golang_server/consumer-logger-2
      dockerfile: Dockerfile
    env_file:
      - bitso/bitso-variables.env
    environment:
      kafkaURL: kafka:9092
      orders_topic: topic1
      trades_topic: topic1
      GroupID: logger-group
      KAFKA_USER_ID: 1000
      KAFKA_GROUP_ID: 1000
      HOSTS: cassandra
      CASSANDRA_USERNAME: cassandra
      CASSANDRA_PASSWORD: cassandra
    ports:
      - 4001:4001
    user: "1000:1000"
    depends_on:
      - kafka
      - cassandra
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes

  flask-news-collector:
    build: ./flask_server/services/web
    command: python manage.py run -h 0.0.0.0
    restart: "no"
    volumes:
      - ./flask_server/services/web/:/usr/src/app/
    ports:
      - 5000:5000
    env_file:
      - ./flask_server/.env.dev
    depends_on:
      - db
      - selenium
    stdin_open: true
    tty: true
  db:
    image: postgres:13-alpine
    restart: "no"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=news
    ports:
      - 5433:5433
    stdin_open: true
    tty: true

  db-postgres-trades:
    image: postgres:16.1-alpine
    restart: "no"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./postgres/trades.env
    ports:
      - "5434:5434"

    stdin_open: true
    tty: true
  scala_order_analyzer_1:
    build:
      context: ./scala_server
      dockerfile: Dockerfile
    command: sbt run
    restart: "no"
    volumes:
      - .:/app
      - ~/.ivy2:/root/.ivy2
      - ~/.sbt:/root/.sbt
    depends_on:
      - kafka
    environment:
      - topic=topic1
      - kafkaURL=kafka:9092
      - HOSTS=cassandra
      - CASSANDRA_USERNAME=cassandra
      - CASSANDRA_PASSWORD=cassandra
      - API_PORT=8080

  spark_order_analyzer_1:
    image: bitnami/spark:latest
    container_name: spark
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
    ports:
      - "8085:8085"
      - "7077:7077"
    restart: "no"
    depends_on:
      - scala_order_analyzer_1

  cassandra_db_order_analyzer_1:
    image: bitnami/cassandra:latest
    container_name: cassandra
    ports:
      - "7000:7000"
      - "9043:9043"
    restart: "no"
    environment:
      - CASSANDRA_PASSWORD_SEEDER=yes
      - CASSANDRA_PASSWORD=example_password
    depends_on:
      - spark_order_analyzer_1

  # scala_cassandra_1:
  #   image: cassandra:4.1
  #   container_name: cassandra
  #   ports:
  #     - "9043:9043"
  #   volumes:
  #     - ~/apps/cassandra:/var/lib/cassandra
  #   environment:
  #     CASSANDRA_CLUSTER_NAME: "cassandra-cluster"
  #   depends_on:
  #     - zookeeper

  selenium:
    image: selenium/standalone-chrome
    ports:
      - "4444:4444"
volumes:
  postgres_data:
  db-postgres-trades:
# networks:
#   backend:
#     driver: bridge
